- Created a folder 
- Initialized the rep - npm init 
- node_modules,package.json,package-lock.json
- installed express
- Created a server
- Listen to port at some port
- Wrote request and response handler /test / /edit 
- nodemon installed for convi
- diff bw ^ and ~ in dependecies 

----------------------------------------------------------------------------

- Initialized git repo for this folder 
- created a remote repo on github 
- push main branch to origin/main
- made some misc api request
- installed postman , worksapce - >collection(collection of API to test)
- Tested GET,POST,DELETE API ....
- Read the DOC for regex in path , and other complex paths ...
----------------------------------------------------------------------------

- Route handling 
- create multiple route handler 
- what is middleware and route handler
- importance of route handler 
- create a auth middleware for /admin -done
- create a auth middleware for /user except /user/register -done
- do error handling using try catch 
- do error handling using app.use("/",(err,req,res,next))

-----------------------------------------------------------------------------
- create a clutser and connect using compass
- installed mongoose lib 
- create a config folder and database.js file for database communication
- connect your application to database using string 
- call the connectDB function before starting app.listen on 7777
- create an User Schema and then model 
------------------------------------------------------------------------------

- send data thorugh dynamic using postman 
- use express.json to parse data in req.body 
- check DB if data(doc) is saved 
- GET API - to get user by email - done
- GET API - Feed API - get all users -done 
- findBY ID api 
- findby email ID and update -done
- update api -done
- delete api -done
- use patch for update -done
- find diff bw patch and put -done

--------------------------------------------------------------------------------

- Explore Schematype options and use docs


- add required , unique , lowercase , min , minLength , trim, -done
- add ddefault - done 
- create custom validation function for gender 
- improve DB schema - put reqd validation - done 
- add timestamps to docs... 

---------------------------------------------------------------------------------

API level validation

- add api level validation on patch and post api 
- skills length validation
- patch field validation
- install validator library
- validate email using validator
- validate photourl using validator
- strong password validation

-------------------------------------------------------------------------------------

Encrypting passwords:





